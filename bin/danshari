#! /usr/bin/env ruby
#
# 謎ファイルを断捨離するアプリ/コマンド
#
# % danshari file dir
#
# https://Scrapbox.io/file-danshari
#
# 増井の個人環境に依存するところが多すぎるのをなんとかしたい...
#
# Platypusで作ったアプリの場合何故かforce_encodingが必要になる...
#

require 'exifr/jpeg'
require 'find'
require 'json'
require 'digest/md5'
require 'gyazo'
require 'shellwords'
require 'uri'

CONF = File.expand_path("~/.danshari")
DEFAULT_PROJECT = "danshari-default"

class Danshari
  attr_reader :id

  def gyazo_token
    # Gyazoアップロードに必要なトークン
    token = ENV['GYAZO_TOKEN'] # .bash_profileなどに書いてある
    unless token
      File.open(File.expand_path("~masui/.zshrc")){ |f|
        f.each { |line|
          line.chomp!
          if line.force_encoding("UTF-8") =~ /GYAZO_TOKEN=([0-9a-f]+)$/ # 何故force_encoding?
            token = $1
            break
          end
        }
      }
    end
    token
  end

  def initialize(project,list)
    @project = project
    @id = Time.now.strftime('%Y%m%d%H%M%S')
    @allfiles = []
    @allitems = []
    
    @gyazo = Gyazo::Client.new access_token: gyazo_token

    list.each { |item|
      if File.exist?(item)
        @allitems.push(item)
        if File.directory?(item)
          puts "file <#{item}> is directory"
        end
        Find.find(item) { |f|
          if File.file?(f)
            @allfiles.push f
          end
        }
      end
    }
  end

  def upload_s3(file)
    ext = ''
    if file =~ /^(.*)(\.\w+)$/ then
      ext = $2
    end
    hash = Digest::MD5.new.update(File.read(file)).to_s

    begin
      # aws cp コマンドを使う
      # 認証情報は ~/.aws/ にある
      # ファイル名が日本語だとうまくいかないことがあるので別ファイルにコピーしてからアップロード
      bucket = "masui.org"
      dstfile = "s3://#{bucket}/#{hash[0]}/#{hash[1]}/#{hash}#{ext}"
      system "/bin/cp '#{file}' /tmp/__danshari_file"
      system "/usr/local/bin/aws s3 cp --profile default /tmp/__danshari_file #{dstfile} --acl public-read "
      system "/bin/rm /tmp/__danshari_file"
      "https://s3-ap-northeast-1.amazonaws.com/#{bucket}/#{hash[0]}/#{hash[1]}/#{hash}#{ext}"
    rescue => e
      File.open("/tmp/error","a"){ |f|
        f.puts e
      }
    end
    "https://s3-ap-northeast-1.amazonaws.com/#{bucket}/#{hash[0]}/#{hash[1]}/#{hash}#{ext}"
  end

  def modtime(file)
    time = File.mtime(file).strftime('%Y%m%d%H%M%S')
  end

  def file_attr(file)
    attr = {}

    attr['filename'] = file
    attr['fullname'] = File.expand_path(file)
    attr['basename'] = File.basename(file)

    # MD5値
    attr['md5'] = Digest::MD5.new.update(File.read(file)).to_s

    # 時刻
    attr['time'] = modtime(file)
    if file =~ /(\w+)\.(jpg|jpeg)/i
      begin
        exif = EXIFR::JPEG.new(file)
        t = exif.date_time
        if t
          attr['time'] = t.strftime("%Y%m%d%H%M%S")
        end
      rescue
      end
    end

    # サイズ
    attr['size'] = File.size(file)

    # 特殊attr
    if file =~ /\.(jpg|jpeg|png)$/i
      attr['time'] =~ /^(\d{4})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})/
      time = Time.local($1.to_i,$2.to_i,$3.to_i,$4.to_i,$5.to_i,$6.to_i)
      
      # STDERR.puts "upload #{file} to Gyazo..."
      res = @gyazo.upload imagefile: file, created_at: time
      gyazourl = res[:permalink_url]
      
      attr['gyazourl'] = gyazourl
    elsif file =~ /\.pdf$/i
      attr['time'] =~ /^(\d{4})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})/
      time = Time.local($1.to_i,$2.to_i,$3.to_i,$4.to_i,$5.to_i,$6.to_i)
      
      # pdftopngでPDFを画像に変換
      # brew install poppler でpdftopngができたりできなかったり
      if File.exist?("/usr/local/bin/pdftopng")
        system "/usr/local/bin/pdftopng #{attr['fullname']} /tmp/__danshari"
      else
        system "pdftoppm -f 1 -l 1 -jpeg >#{attr['fullname']} > /tmp/__danshari-000001.png"
      end

      png = "/tmp/__danshari-000001.png"
      STDERR.puts "upload #{png} to Gyazo..."
      res = @gyazo.upload imagefile: png, created_at: time
      system "/bin/rm /tmp/__danshari*"
      
      gyazourl = res[:permalink_url]
      File.open("/tmp/log","a"){ |f|
        f.puts "gyazourl = #{gyazourl}"
      }
      
      attr['gyazourl'] = gyazourl
    end
    
    # GPS情報
    if file =~ /\.(jpg|jpeg)$/i
      begin
        exif = EXIFR::JPEG.new(file)
        d = exif.gps_longitude
        if d
          long = d[0] + d[1] / 60 + d[2] / 3600
          d = exif.gps_latitude
          lat = d[0] + d[1] / 60 + d[2] / 3600
          mapline = "[#{exif.gps_latitude_ref}#{lat.to_f},#{exif.gps_longitude_ref}#{long.to_f},Z14]"
          attr['mapline'] = mapline
        end
      rescue
      end
    end

    # テキストデータ
    File.open("/tmp/error","w"){ |f|
      f.puts attr['fullname']
      f.puts "/usr/bin/file '#{attr['fullname']}'"
    }
    begin
      s = `LANG=ja_JP.UTF-8 /usr/bin/file '#{attr['fullname']}'`.force_encoding("UTF-8")
      File.open("/tmp/error","a"){ |f|
        f.puts s
      }
      
      if `LANG=ja_JP.UTF-8 /usr/bin/file '#{attr['fullname']}'`.force_encoding("UTF-8") =~ /text/
        File.open("/tmp/error","a"){ |f|
          f.puts "This is a text file."
        }
        text = File.read(attr['fullname']).force_encoding("UTF-8")
        texts = text.split(/\n/)[0,10]
        if text.length > 900
          texts = text.split(/\n/)[0,2]
        end
        File.open("/tmp/error","a"){ |f|
          f.puts text
        }
        attr['text'] = texts
      end
    rescue => e
      File.open("/tmp/error","a"){ |f|
        f.puts e
      }
    end

    attr
  end

  def exec
    attrs = []
    @allfiles.each { |file|
      attr = file_attr(file)

      attr['uploadurl'] = upload_s3(file)

      File.open("/tmp/error","a"){ |f|
        f.puts "s3 upload success"
        f.puts "file = #{attr['uploadurl']}"
      }
      
      attrs.push(attr)
    }

    # Scrapboxテキスト作成
    begin    
      str = ''.force_encoding("UTF-8")
      attrs.each { |attr|
        obj = {}
        # title = attr['basename']
        # title += " - #{attr['md5'][0,6]}" if title !~ /[0-9a-f]{32}/
        # # str += "#{title}\n"
        str += "[#{attr['fullname']} #{attr['uploadurl']}]\n".force_encoding("UTF-8")
        if attr['text']
          attr['text'].each { |line|
            str += ">#{line}\n".force_encoding("UTF-8")
          }
        end
        if attr['time']
          attr['time'] =~ /^(........)(.*)$/
          s = "[#{$1}]#{$2}"
          str += "Date: #{s}\n".force_encoding("UTF-8")
        end
        str += "#{attr['mapline']}\n".force_encoding("UTF-8") if attr['mapline']
        str += "File: [#{attr['basename']}]\n".force_encoding("UTF-8") # 同じファイル名のものをリンクするため
        str += "Size: #{attr['size']}\n".force_encoding("UTF-8") if attr['size']
        str += "[[#{attr['gyazourl']} #{attr['uploadurl']}]]\n".force_encoding("UTF-8") if attr['gyazourl']
        str += "\n".force_encoding("UTF-8")
      }
    rescue => e
      File.open("/tmp/error","a"){ |f|
        f.puts e
      }
    end

    # ゴミ箱へ
    puts "allitems = #{@allitems}"
    @allitems.each { |item|
      puts "Delete #{item}"
      path = File.expand_path(item)
      next unless File.exist?(path)
      script = <<EOF
tell application "Finder"
  move POSIX file "#{path}" to trash
end tell
EOF
      system "/usr/bin/osascript -e '#{script}'"
    }

    # Scrapboxページ開く
    system "/usr/bin/open 'https://Scrapbox.io/#{@project}/#{@id}?body=#{URI.encode_www_form_component(str)}'"
  end
end

project = DEFAULT_PROJECT
if File.exist?(CONF)
  project = File.read(CONF).chomp
end

if ARGV.length == 0
  script = <<EOF
display dialog "情報をセーブするScrapboxプロジェクト名を入力してください" default button 2 default answer "#{project}"
set tmpText to result
set rText to text returned of tmpText
EOF
  project = `/usr/bin/osascript -e '#{script}'`
  if project != '' # キャンセルじゃない場合
    project = DEFAULT_PROJECT if project == "\n" # 空文字列の場合
    File.open(CONF,"w"){ |f|
      f.puts project
    }
  end
  exit
end

d = Danshari.new(project,ARGV)
d.exec
