#! /usr/bin/env ruby
#
# 謎ファイルを断捨離する
#
# % danshari file dir
#
# https://Scrapbox.io/file-danshari
#
# 増井の個人環境に依存するところが多すぎるのをなんとかしたい...
#

require 'exifr/jpeg'
require 'find'
require 'json'
require 'digest/md5'
require 'gyazo'
require 'shellwords'
require 'uri'

CONF = File.expand_path("~/.danshari")
DEFAULT_PROJECT = "danshari-default"

class Danshari
  attr_reader :id

  def initialize(project,list)
    @project = project
    @id = Time.now.strftime('%Y%m%d%H%M%S')
    @allfiles = []
    @allitems = []

    token = ENV['GYAZO_TOKEN'] # .bash_profileなどに書いてある
    @gyazo = Gyazo::Client.new access_token: token

    list.each { |item|
      if File.exist?(item)
        @allitems.push(item)
        if File.directory?(item)
          puts "file <#{item}> is directory"
        end
        Find.find(item) { |f|
          if File.file?(f)
            @allfiles.push f
          end
        }
      end
    }
  end

  def upload_s3(file)
    ext = ''
    if file =~ /^(.*)(\.\w+)$/ then
      ext = $2
    end
    hash = Digest::MD5.new.update(File.read(file)).to_s

    # aws cp コマンドを使う
    # 認証情報は ~/.aws/ にある
    bucket = "masui.org"
    dstfile = "s3://#{bucket}/#{hash[0]}/#{hash[1]}/#{hash}#{ext}"
    STDERR.puts "aws s3 cp #{Shellwords.escape(file)} #{dstfile} --acl public-read "
    #system "USER=masui HOME=/Users/masui /usr/local/bin/aws s3 cp --profile default #{Shellwords.escape(file)} #{dstfile} --acl public-read "
    system "/usr/local/bin/aws s3 cp --profile default #{Shellwords.escape(file)} #{dstfile} --acl public-read "
    "https://s3-ap-northeast-1.amazonaws.com/#{bucket}/#{hash[0]}/#{hash[1]}/#{hash}#{ext}"
  end

  def modtime(file)
    time = File.mtime(file).strftime('%Y%m%d%H%M%S')
  end

  def general_attr(file)
    attr = {}

    attr['filename'] = file
    attr['fullname'] = File.expand_path(file)
    attr['basename'] = File.basename(file)

    # MD5値
    attr['md5'] = Digest::MD5.new.update(File.read(file)).to_s

    # 時刻
    attr['time'] = modtime(file)
    if file =~ /(\w+)\.(jpg|jpeg)/i
      begin
        exif = EXIFR::JPEG.new(file)
        t = exif.date_time
        if t
          attr['time'] = t.strftime("%Y%m%d%H%M%S")
        end
      rescue
      end
    end

    # サイズ
    attr['size'] = File.size(file)

    attr
  end

  def exec
    attrs = []
    @allfiles.each { |file|
      attr = general_attr(file)

      # 特殊属性を追加
      if file =~ /\.(jpg|jpeg|png)$/i
        attr['time'] =~ /^(\d{4})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})/
        time = Time.local($1.to_i,$2.to_i,$3.to_i,$4.to_i,$5.to_i,$6.to_i)
        
        STDERR.puts "upload #{file} to Gyazo..."
        res = @gyazo.upload imagefile: file, created_at: time
        gyazourl = res[:permalink_url]

        attr['gyazourl'] = gyazourl
      elsif file =~ /\.pdf$/i
        attr['time'] =~ /^(\d{4})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})/
        time = Time.local($1.to_i,$2.to_i,$3.to_i,$4.to_i,$5.to_i,$6.to_i)
        
        system "convert -density 300 -geometry 1000 '#{file}[0]' /tmp/danshari.jpg" # pdfimagesの方がいいのかも?
        
        STDERR.puts "upload /tmp/danshari to Gyazo..."
        res = @gyazo.upload imagefile: "/tmp/danshari.jpg", created_at: time
        gyazourl = res[:permalink_url]

        attr['gyazourl'] = gyazourl
      end

      # GPS情報
      if file =~ /\.(jpg|jpeg)$/i
        begin
          exif = EXIFR::JPEG.new(file)
          d = exif.gps_longitude
          if d
            long = d[0] + d[1] / 60 + d[2] / 3600
            d = exif.gps_latitude
            lat = d[0] + d[1] / 60 + d[2] / 3600
            mapline = "[#{exif.gps_latitude_ref}#{lat.to_f},#{exif.gps_longitude_ref}#{long.to_f},Z14]"
            attr['mapline'] = mapline
          end
        rescue
        end
      end

      # テキストデータ
      begin
        if `file #{file}`.force_encoding("UTF-8") =~ /text/
          text = File.read(file).split(/\n/)[0,10]
          attr['text'] = text
        end
      rescue
      end

      attr['uploadurl'] = upload_s3(file)
      
      attrs.push(attr)
    }

    # データ作成
    str = ''
    attrs.each { |attr|
      obj = {}
      # title = attr['basename']
      # title += " - #{attr['md5'][0,6]}" if title !~ /[0-9a-f]{32}/
      # # str += "#{title}\n"
      str += "[#{attr['fullname']} #{attr['uploadurl']}]\n"
      if attr['text']
        attr['text'].each { |line|
          str += ">#{line}\n"
        }
      end
      if attr['time']
        attr['time'] =~ /^(........)(.*)$/
        s = "[#{$1}]#{$2}"
        str += "Date: #{s}\n"
      end
      str += "#{attr['mapline']}\n" if attr['mapline']
      str += "File: [#{attr['basename']}]\n" # 同じファイル名のものをリンクするため
      str += "Size: #{attr['size']}\n" if attr['size']
      str += "[#{attr['gyazourl']} #{attr['uploadurl']}]\n" if attr['gyazourl']
      str += "\n"
    }
    # ゴミ箱へ
    puts "allitems = #{@allitems}"
    @allitems.each { |item|
      puts "Delete #{item}"
      path = File.expand_path(item)
      next unless File.exist?(path)
      script = <<EOF
tell application "Finder"
  move POSIX file "#{path}" to trash
end tell
EOF
      system "osascript -e '#{script}'"
    }
    s = "https://Scrapbox.io/#{@project}/#{@id}?body=#{str}"
    system "open 'https://Scrapbox.io/#{@project}/#{@id}?body=#{URI.encode_www_form_component(str)}'"

    
    # JSON生成
    if false 
      data = {}
      pages = []
      attrs.each { |attr|
        obj = {}
        title = attr['basename']
        title += " - #{attr['md5'][0,6]}" if title !~ /[0-9a-f]{32}/
        obj['title'] = title
        lines = []
        lines.push(title)
        if attr['time']
          attr['time'] =~ /^(........)(.*)$/
          s = "[#{$1}]#{$2}"
          lines.push("Date: #{s}")
        end
        if attr['text']
          attr['text'].each { |line|
            lines.push(">#{line}")
          }
          lines.push("")
        end
        lines.push(attr['mapline']) if attr['mapline']
        lines.push("[#{attr['fullname']} #{attr['uploadurl']}]")
        lines.push("File: [#{attr['basename']}]") # 同じファイル名のものをリンクするため
        lines.push("Size: #{attr['size']}") if attr['size']
        lines.push("Id: [#{@id}]")
        lines.push("[#{attr['gyazourl']} #{attr['uploadurl']}]") if attr['gyazourl']
        obj['lines'] = lines
        pages.push(obj)
      }
      data['pages'] = pages
      
      json = data.to_json
      puts json
      File.open("/Users/masui/Danshari/JSON/data#{@id}.json","w"){ |f|
        f.puts json
      }
      File.open("/Users/masui/Danshari/JSON/danshari.json","w"){ |f|
        f.puts json
      }
      

      system "open https://scrapbox.io/projects/masui-files/settings/page-data"
    end
  end
end

project = DEFAULT_PROJECT
if File.exist?(CONF)
  project = File.read(CONF).chomp
end

#File.open("/tmp/log","w"){ |f|
#  f.puts project
#}
#
#File.open("/tmp/log","a"){ |f|
#  f.puts ARGV.length
#}
  
if ARGV.length == 0
  script = <<EOF
display dialog "情報をセーブするScrapboxプロジェクト名を入力してください" default button 2 default answer "#{project}"
set tmpText to result
set rText to text returned of tmpText
EOF
  project = `osascript -e '#{script}'`
  if project != '' # キャンセルじゃない場合
    project = DEFAULT_PROJECT if project == "\n" # 空文字列の場合
    File.open(CONF,"w"){ |f|
      f.puts project
    }
  end
  exit
end

d = Danshari.new(project,ARGV)
d.exec
